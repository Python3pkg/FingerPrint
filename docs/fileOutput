---------------------
Ramdom notes 
---------------------

 --  file command outputs for different type of ELF:
#din libaries
 ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=0xf254b582343abb2b1bfc14d37925ae3845e39cb2, stripped
#kernel modules
 ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=0xfa58dd263c347ce752193bf4fd71248bf463833f, not stripped
#binaries
 ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x214a38d0db472db559f0dabf0ae97f82fea83e03, stripped
#static lib
 ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped


if there is "dynamically linked (uses shared libs)" means that some of it needs dynamic libraries


 --  objdump simbol mane


Use objdump -T file to get the list of symbols aka functions or variable names in the file
below the output:

#this are function used by this file but not defined
0000000000000000      DF *UND*  0000000000000000  Base        dm_task_destroy
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.3   __ctype_b_loc
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.3.4 __sprintf_chk
#this are function defined in this file
0000000000005710 g    DF .text  0000000000000005  CRYPTSETUP_1.0 crypt_get_device_name
0000000000007b90 g    DF .text  00000000000002db  CRYPTSETUP_1.0 crypt_activate_by_passphrase
0000000000004fd0 g    DF .text  00000000000003fd  CRYPTSETUP_1.0 crypt_dump
0000000000007f00 g    DF .text  000000000000010e  CRYPTSETUP_1.0 crypt_keyslot_destroy
# This is a string internally defined
00000000004bed70 g    DO .rodata    0000000000000010  Base        wait_doc

You can also use the nm -D to see symbols but the output is worst.

 --  objdump library needed

If you run objdump -x filename it shows all header information among them you are interested 
to the:

Dynamic Section:
  NEEDED               libselinux.so.1
  NEEDED               librt.so.1
...
Version References:
...


You can also use the readelf -d -V filename to the similar output.

 --  Gcc
You can ask the gcc to tell you where is a particular library with 
gcc -Wl,-t -o /tmp/testfile -lm
you are gonna get an error but in the output it will tell you where libm is

 --  External links to good documentation

Rpm dependency specification:
 - http://rpm.org/wiki/PackagerDocs/Dependencies

