#!/bin/python
#
# LC
#

from datetime import datetime
import os
import StringIO
from optparse import OptionParser

import FingerPrint
from FingerPrint.swirl import *
from FingerPrint.blotter import Blotter
from FingerPrint.serializer import PickleSerializer


def main():
    usage = "usage: %prog [options] inputfile1 ... inputfileN"
    parser = OptionParser(usage, version=FingerPrint.version)
    parser.add_option("-f", "--file", dest="filename", default='output.swirl',
                      help="write output swirl into FILE", metavar="FILE")
    parser.add_option("-n", "--name", dest="name", default="Swirl",
                      help="the name of this swirl, default to Swirl")
    parser.add_option("-l", "--filelist", dest="filelist", default=None,
                      help="the name of this swirl, default to Swirl")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                  help="Output a textual representation of the swirl")
    #parser.add_option("-q", "--quiet",
    #                  action="store_false", dest="verbose", default=True,
    #                  help="don't print swirl to output")
    
    (options, args) = parser.parse_args()

    #maybe in the future we can read them from a file or stdin
    #for now it works
    filenameList = args
    if len(filenameList) < 1:
        parser.print_help()
        parser.error("you need to specify at least one inputfile")
    for fileName in filenameList:
        if not os.path.exists(fileName):
            parser.print_help()
            parser.error("The file %s does not exist on this system." % fileName)
    #creating blotter
    blotter = Blotter(options.name, filenameList)
    if options.verbose:
        print "swirl structure:\n", blotter.getSwirl()
        #self.assertEqual(self.seq, range(10))
        print "list of global dependecies:\n", blotter.getSwirl().getDependencies()
        print "list of global provides:\n", blotter.getSwirl().getProvides()
    if options.filename:
        outputfd = open(options.filename, 'w')
        pickle = PickleSerializer( outputfd )
        pickle.save(blotter.getSwirl() )
        outputfd.close()
        print "file %s saved" % options.filename

    return
    

if __name__ == "__main__":
    main()

