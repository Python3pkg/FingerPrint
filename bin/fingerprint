#!/usr/bin/env python
#
# LC
#

from time import gmtime, strftime
import os
import StringIO
import sys
from optparse import OptionParser, OptionGroup


try:
    import FingerPrint, FingerPrint.sergeant
except ImportError:
    #we need this to run from sources without installing fingerprint
    fullPath = os.path.dirname(os.path.realpath(__file__))
    parDir = os.path.abspath(os.path.join(fullPath, os.path.pardir))
    sys.path.append(parDir)
    import FingerPrint, FingerPrint.sergeant

#
# compatibility with python2.4
#
if "any" not in dir(__builtins__):
    from FingerPrint.utils import any


from FingerPrint.swirl import Swirl
from FingerPrint.blotter import Blotter
from FingerPrint.serializer import PickleSerializer


def main():
    #
    # set up the option parser
    #

    requiredFlags = "[-q|-c|-y|-d|-i]"
    usage = "usage: %prog " + requiredFlags + " [options] inputfile1 ... inputfileN"
    parser = OptionParser(usage, version=FingerPrint.version)


    # required options one of them must be selected
    group = OptionGroup(parser, "Required Options",
                    "You must select one (and only one) of these options")
    parser.add_option_group(group)
    group.add_option("-c", "--create", action="store_true", dest="create",
                    default=False,
                    help="Create a swirl from the given input file names")
    group.add_option("-d", "--display", action="store_true", dest="display",
                    default=False,
                    help="Display the content of the given swirl file")
    group.add_option("-q", "--query", action="store_true", dest="query",
                    default=False,
                    help="Run a query against a swirl file")
    group.add_option("-y", "--verify", action="store_true", dest="verify",
                    default=False,
                    help="Scan the current system to verify compatibility with given swirl")
    group.add_option("-i", "--integrity", action="store_true", dest="integrity",
                    default=False,
                    help="Verify the integrity of all the dependencies of the "
                    "given swirl (using md5sum)")

    #various option
    parser.add_option("-f", "--file", dest="filename", default='output.swirl',
                    help="write or read swirl FILE (default to output.swirl)",
                    metavar="FILE")
    parser.add_option("-n", "--name", dest="name", default="Swirl",
                    help="the name of the swirl that will be created, this is "
                    "an internal value used at creation time (default to Swirl)")
    parser.add_option("-p", "--paths", dest="paths",
                    help="add extra paths (colon separated) to search for "
                    " dependencies (valid with verify only)")
    parser.add_option("-e", "--process", dest="process",
                    help="PIDs of the processes that should be dynamically traced"
                    " for creating a swirl")
    parser.add_option("-l", "--filelist", dest="filelist", default=None,
                    help="a file containing a list of file which will be "
                    "included to this swirl")
    parser.add_option("-s", "--csvfile", dest="csvfile", default=None,
                    help="The output of a verification or of an integrity check "
                    "will be saved in the FILE in a CSV format, if the file "
                    "already exists the output of the new check will be appended "
                    "to it if not it will be created", metavar="FILE")
    parser.add_option("-S", "--query_file", dest="query_file", default=None,
                    help="Check if the given FILE is required by this swirl, if run "
                    "with verbose it also print the file requiring this FILE. Return "
                    "0 if this FILE is required by this swirl 1 otherwise", metavar="FILE")


    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                    default=False,
                    help="Output a textual representation of the swirl")
    (options, args) = parser.parse_args()


    #
    # switch based on user input
    #
    if (options.query + options.verify + options.create + options.display + options.integrity) != 1:
        #too many or too few flags
        parser.error("Only one of the flag " + requiredFlags + " must be used at a time" )

    if options.verify or options.integrity :
        #verify the current swirl
        try:
            serg = FingerPrint.sergeant.readFromPickle(options.filename)
        except IOError, e:
            print "The input file %s can not be read." % options.filename
            sys.exit(1)
        if options.paths :
            serg.setExtraPath(options.paths)
        if options.csvfile :
            swirl = serg.getSwirl()
            if not os.path.isfile(options.csvfile):
                # new file
                # need to initialize it
                csvfilein = open(options.csvfile, 'w')
                csvfilein.write(swirl.name + ',' + swirl.getDateString())
                csvfilein.write('\n\nVerification type\nDate\n')
                for dep in swirl.getDependencies():
                    csvfilein.write(dep.depname + '\n')
                csvfilein.close()
            csvfilein = open(options.csvfile, 'r')
            csvfileout = open(options.csvfile + '.tmp', 'w')
            fileline = csvfilein.readline().strip().split(',')
            #
            # let's verify that this csv and this swirl file match
            #
            if fileline[0] != swirl.name or \
                fileline[1] != swirl.getDateString():
                print "The file %s does not cerrespond with the swirl %s" % \
                    (options.csvfile, options.filename)
                sys.exit(1)
            csvfileout.write(fileline[0] + ',' + fileline[1] +'\n')
            # empty line
            csvfilein.readline()
            csvfileout.write('\n')
            if options.verify :
                operation = 'Verify'
                returnValue = serg.check()
            else :
                operation = 'Integrity'
                returnValue = serg.checkHash()
            error = serg.getError()
            csvfileout.write(csvfilein.readline().rstrip() + ", " + operation + "\n")
            datestr = strftime("%Y-%m-%d %H:%M:%S", gmtime())
            csvfileout.write(csvfilein.readline().rstrip() + ", " + datestr + "\n")
            for fileline in csvfilein.readlines():
                fileline = fileline.strip()
                if any([i in fileline for i in error]):
                    # there is an error
                    csvfileout.write(fileline + ", False\n")
                else:
                    csvfileout.write(fileline + ", True\n")
            csvfileout.close()
            csvfilein.close()
            os.rename(options.csvfile + '.tmp', options.csvfile)
            if returnValue:
                sys.exit(0)
            else:
                sys.exit(1)
        elif options.verify :
            #verify swirl
            if not serg.check():
                #error let print some stuff
                print "The file %s failed.\n" % options.filename
                if options.verbose :
                    print "Missing Dependecies:"
                    for i in serg.getError():
                        print "    ", i
                sys.exit(1)
        elif options.integrity :
            if not serg.checkHash():
                #error let print some stuff
                print "The file %s failed.\n" % options.filename
                if options.verbose :
                    print "Modified Dependecies:"
                    for i in serg.getError():
                        print "     ", i
                sys.exit(1)
        else:
            print "Swirl %s pass the test" % options.filename
            return 0


    elif options.create :
        #create a swirl
        filenameList = []
        if options.filelist :
            #read the input filelist from file
            try:
                filelistfd = open(options.filelist)
                for i in filelistfd:
                    filenameList.append(i.strip())
            except IOError:
                parser.print_help()
                parser.error("The file %s does not exist on this system.\n" % options.filelist)
        if filenameList == []:
            #get the filelist from command line
            filenameList = args
        if len(filenameList) < 1 and not options.process:
            parser.print_help()
            parser.error("You need to specify at least one inputfile or the FILELIST "
                         "parameter or the process number to trace (-p option).\n")
        #creating blotter
        try:
            blotter = Blotter(options.name, filenameList, options.process)
        except IOError, e:
            parser.error("" + str(e))
        if options.verbose:
            print "swirl structure:\n", blotter.getSwirl()
            #self.assertEqual(self.seq, range(10))
            print "list of global dependencies:\n", blotter.getSwirl().getDependencies()
            print "list of global provides:\n", blotter.getSwirl().getProvides()
        if options.filename:
            #this should be always true
            outputfd = open(options.filename, 'w')
            pickle = PickleSerializer( outputfd )
            pickle.save(blotter.getSwirl() )
            outputfd.close()
            print "File %s saved" % options.filename
        # success
        return 0
    elif options.display :
        # display the swirl
        if options.filename :
            try:
                serg = FingerPrint.sergeant.readFromPickle(options.filename)
            except IOError, e:
                parser.error("The file %s could not be opened on this system: %s.\n" % (options.filename, e))
            print "File name: ", options.filename
            if options.verbose :
                print serg.getSwirl()
            print "Global Dependencies:  " , serg.getSwirl().getDependencies()
            print "Global Provides:  ", serg.getSwirl().getProvides()
        return 0
    elif options.query :
        # query the swirl file
        if options.filename :
            try:
                serg = FingerPrint.sergeant.readFromPickle(options.filename)
            except IOError:
                parser.error("The file %s could not be opened on this system.\n" % options.filename)
        if options.query_file :
            # who requires this file
            files = serg.checkDependencyPath(options.query_file)
            if files :
                if options.verbose :
                    print files
                return 0
            else:
                # given file is not required by this swirl
                sys.exit(1)
    else:
        parser.print_help()
        parser.error( "You must select one option between the required flags " + requiredFlags + ".\n" )


if __name__ == "__main__":
    main()

