#!/bin/python
#
# LC
#

from datetime import datetime
import os
import StringIO
import sys
from optparse import OptionParser, OptionGroup

try:
	import FingerPrint, FingerPrint.sergeant
except ImportError:
	#we need this when we run unittest
        sys.path.append("./")
	import FingerPrint, FingerPrint.sergeant

from FingerPrint.swirl import Swirl
from FingerPrint.blotter import Blotter
from FingerPrint.serializer import PickleSerializer


def main():
    #
    # set up the option parser
    # 
    usage = "usage: %prog [-c|-y|-d|-i] [options] inputfile1 ... inputfileN"
    parser = OptionParser(usage, version=FingerPrint.version)
    #what are we going to do required options
    group = OptionGroup(parser, "Required Options",
                    "You must select one of these options")
    parser.add_option_group(group)

    group.add_option("-c", "--create", action="store_true", dest="create",
                    default=False,
                    help="Create a swirl from the given input file names")
    group.add_option("-d", "--display", action="store_true", dest="display",
                    default=False,
                    help="Display the content of the given swirl file")
    group.add_option("-y", "--verify", action="store_true", dest="verify",
                    default=False,
                    help="Scan the current system to verify compatibility with given swirl")
    group.add_option("-i", "--integrity", action="store_true", dest="integrity",
                    default=False,
                    help="Verify the integrity of all the dependencies of the " + \
                    "given swirl (using md5sum)")
    #various option
    parser.add_option("-f", "--file", dest="filename", default='output.swirl',
                    help="write or read swirl FILE (default to output.swirl)", 
                    metavar="FILE")
    parser.add_option("-n", "--name", dest="name", default="Swirl",
                    help="the name of the swirl that will be created, this is " + \
                    "an internal value used at creation time (default to Swirl)")
    parser.add_option("-p", "--paths", dest="paths", 
                    help="add extra paths (colon separated) to search for " +\
                    " dependencies (valid with verify only)")
    parser.add_option("-l", "--filelist", dest="filelist", default=None,
                    help="a file containing a list of file which will be " + \
                    "included to this swirl")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", 
                    default=False,
                    help="Output a textual representation of the swirl")
    (options, args) = parser.parse_args()
   
 
    #
    # switch based on user input
    #
    if (options.verify + options.create + options.display + options.integrity) != 1:
        #too many or too few flags
        parser.error("Only one of the flag -y -c -d -i must be used at a time" )

    if options.verify or options.integrity :
        #verify the current swirl
        try:
            serg = FingerPrint.sergeant.readFromPickle(options.filename)
        except IOError, e:
            print "The input file %s can not be read." % options.filename
            sys.exit(1)
        if options.paths :
            serg.setExtraPath(options.paths)
        if options.verify :
            #verify swirl
            if not serg.check():
                #error let print some stuff
                print "The file %s failed.\n" % options.filename 
                if options.verbose :
                    print "Missing Dependecies:"
                    for i in serg.getError():
                        print "    ", i
                sys.exit(1)
        elif options.integrity :
            if not serg.checkHash():
                #error let print some stuff
                print "The file %s failed.\n" % options.filename
                if options.verbose :
                    print "Modified Dependecies:"
                    for i in serg.getError():
                        print "     ", i
                sys.exit(1)
        else:
            print "Swirl %s pass the test" % options.filename
            return 0


    elif options.create :
        #create a swirl 
        filenameList = []
        if options.filelist :
            #read the input filelist from file
            try:
                filelistfd = open(options.filelist)
                for i in filelistfd:
                    filenameList.append(i.strip())
            except IOError:
                parser.print_help()
                parser.error("The file %s does not exist on this system.\n" % options.filelist)
        if filenameList == []:
            #get the filelist from command line
            filenameList = args
        if len(filenameList) < 1:
            parser.print_help()
            parser.error("You need to specify at least one inputfile or the FILELIST parameter.\n")
        #creating blotter
        try:
            blotter = Blotter(options.name, filenameList)
        except IOError, e:
            parser.error("" + str(e))
        if options.verbose:
            print "swirl structure:\n", blotter.getSwirl()
            #self.assertEqual(self.seq, range(10))
            print "list of global dependecies:\n", blotter.getSwirl().getDependencies()
            print "list of global provides:\n", blotter.getSwirl().getProvides()
        if options.filename:
            #this should be always true
            outputfd = open(options.filename, 'w')
            pickle = PickleSerializer( outputfd )
            pickle.save(blotter.getSwirl() )
            outputfd.close()
            print "File %s saved" % options.filename
        #success
        return 0
    elif options.display :
        #display the swirl
        if options.filename :
            try:
                serg = FingerPrint.sergeant.readFromPickle(options.filename)
            except IOError:
                parser.error("The file %s could not be opened on this system.\n" % options.filename)
            print "File name: ", options.filename
            if options.verbose :
                print serg.getSwirl()
            print "Global Dependencies:  " , serg.getSwirl().getDependencies()
            print "Global Provides:  ", serg.getSwirl().getProvides()
        return 0
    else:
        parser.print_help()
        parser.error( "You must select one option between -d, -c and -y.\n" )
    

if __name__ == "__main__":
    main()

