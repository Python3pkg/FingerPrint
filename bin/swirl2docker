#!/usr/bin/env python

import commands
from optparse import OptionParser
import os.path
import re
import subprocess
import tempfile

parser = OptionParser('usage: %prog [options] [swirl ...]', version='%prog v0.1')
parser.add_option('-t', '--tag', help='docker image tag; defaults to exec name')

(options, args) = parser.parse_args()

runDirPath = '/rundir'
if len(args) == 0:
  args.append('output.swirl')

for swirlFile in args:
  executable = None
  tag = None
  if options.tag:
    tag = options.tag
  tempDirPath = tempfile.mkdtemp()
  dockerFile = open("%s/Dockerfile" % tempDirPath, 'w')
  dockerFile.write('FROM debian\n')
  for requirement in commands.getoutput("fingerprint -d -f %s" % swirlFile).split("\n"):
    matchInfo = re.match(r'^\s*(/\S*)\s*$', requirement)
    if not matchInfo:
      continue
    (requirementDir, requirementFile) = os.path.split(matchInfo.group(1))
    if not executable:
      executable = requirementFile
    if not tag:
      tag = requirementFile
    requirementWild = re.sub(r'\.so.*$', '.so*', requirementFile)
    subprocess.call("/bin/cp -P %s/%s %s" % (requirementDir, requirementWild, tempDirPath), shell=True)
  dockerFile.write("ADD * %s/\n" % runDirPath)
  dockerFile.write('ENV LD_LIBRARY_PATH=%s\n' % runDirPath)
  if executable:
    dockerFile.write('ENTRYPOINT ["%s/%s"]\n' % (runDirPath, executable))
  dockerFile.close()
  print tempDirPath
  subprocess.call("docker build -t %s -f %s/Dockerfile %s/" % (tag, tempDirPath, tempDirPath), shell=True)
